# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import MasterServer_pb2 as MasterServer__pb2


class MasterServerStub(object):
    """
    MasterServer s'encarrega d'enviar les tasques que vol el client a una cua redis
    i uns workers realitzaran les tasques que es demanen i retornaran el resultat
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetResultatCW = channel.unary_unary(
                '/MasterServer/GetResultatCW',
                request_serializer=MasterServer__pb2.input.SerializeToString,
                response_deserializer=MasterServer__pb2.resultat.FromString,
                )
        self.GetResultatWC = channel.unary_unary(
                '/MasterServer/GetResultatWC',
                request_serializer=MasterServer__pb2.input.SerializeToString,
                response_deserializer=MasterServer__pb2.resultat.FromString,
                )
        self.CreateWorker = channel.unary_unary(
                '/MasterServer/CreateWorker',
                request_serializer=MasterServer__pb2.numero.SerializeToString,
                response_deserializer=MasterServer__pb2.resultat.FromString,
                )
        self.DeleteWorker = channel.unary_unary(
                '/MasterServer/DeleteWorker',
                request_serializer=MasterServer__pb2.numero.SerializeToString,
                response_deserializer=MasterServer__pb2.resultat.FromString,
                )
        self.ListWorkers = channel.unary_unary(
                '/MasterServer/ListWorkers',
                request_serializer=MasterServer__pb2.empty.SerializeToString,
                response_deserializer=MasterServer__pb2.resultat.FromString,
                )


class MasterServerServicer(object):
    """
    MasterServer s'encarrega d'enviar les tasques que vol el client a una cua redis
    i uns workers realitzaran les tasques que es demanen i retornaran el resultat
    """

    def GetResultatCW(self, request, context):
        """
        Counting words: compta el nombre total de paraules
        en diferents fitxers de text o entrades de text
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResultatWC(self, request, context):
        """
        Word Count: compta el nombre d'ocurr√®ncies de
        cada paraula en un fitxer de text
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorker(self, request, context):
        """
        CreateWorker: Crea un numero de workers
        Minim entrada = 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorker(self, request, context):
        """
        DeleteWorker: Elimina un numero de workers
        Minim entrada = 1
        Maxim entrada = total de workers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkers(self, request, context):
        """
        ListWorkers: Mostra la llista dels workers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetResultatCW': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResultatCW,
                    request_deserializer=MasterServer__pb2.input.FromString,
                    response_serializer=MasterServer__pb2.resultat.SerializeToString,
            ),
            'GetResultatWC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResultatWC,
                    request_deserializer=MasterServer__pb2.input.FromString,
                    response_serializer=MasterServer__pb2.resultat.SerializeToString,
            ),
            'CreateWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorker,
                    request_deserializer=MasterServer__pb2.numero.FromString,
                    response_serializer=MasterServer__pb2.resultat.SerializeToString,
            ),
            'DeleteWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorker,
                    request_deserializer=MasterServer__pb2.numero.FromString,
                    response_serializer=MasterServer__pb2.resultat.SerializeToString,
            ),
            'ListWorkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkers,
                    request_deserializer=MasterServer__pb2.empty.FromString,
                    response_serializer=MasterServer__pb2.resultat.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterServer(object):
    """
    MasterServer s'encarrega d'enviar les tasques que vol el client a una cua redis
    i uns workers realitzaran les tasques que es demanen i retornaran el resultat
    """

    @staticmethod
    def GetResultatCW(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer/GetResultatCW',
            MasterServer__pb2.input.SerializeToString,
            MasterServer__pb2.resultat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResultatWC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer/GetResultatWC',
            MasterServer__pb2.input.SerializeToString,
            MasterServer__pb2.resultat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer/CreateWorker',
            MasterServer__pb2.numero.SerializeToString,
            MasterServer__pb2.resultat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer/DeleteWorker',
            MasterServer__pb2.numero.SerializeToString,
            MasterServer__pb2.resultat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterServer/ListWorkers',
            MasterServer__pb2.empty.SerializeToString,
            MasterServer__pb2.resultat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
